name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NAMESPACE: giveaway
  TEST_IMAGE: $REGISTRY/$NAMESPACE/$IMAGE_NAME:${{ github.sha }}
  DEV_IMAGE: $REGISTRY/$NAMESPACE/$IMAGE_NAME:latest

jobs:
  login:
    runs-on: ubuntu-latest
    steps:
    - name: Login to Github container registry
      uses: docker/login-action@v2
      with: 
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.ACCESS_TOKEN }} 
      
      
#   test:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Start test
#       run: |
#         git submodule init  
#         git submodule update --merge --recursive --remote
#         docker build -f Dockerfile.test -t app . 
#         docker-compose -f docker-compose.test.yaml run app 

  build:
    needs: login
    runs-on: ubuntu-latest
    steps:
    - name: Submodule sync
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Login to CR
      run: echo ${{ secrets.ACCESS_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && echo ${{github.actor}}
      
    - name: Build  
      run: docker build -t ${{ env.TEST_IMAGE }} .
        
    - name: Tag the image
      run: docker tag ${{ env.TEST_IMAGE }} ${{ env.DEV_IMAGE }}
      
    - name: Push to github registry
      run: docker push ${{ env.DEV_IMAGE }}
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Deploy
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      run: |
        docker pull ${{ env.DEV_IMAGE }}
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" 
        chmod +x ./kubectl && mkdir -p ~/.kube
        mv ./kubectl ~/.kube && export PATH=$PATH:$HOME/.kube
        ls ~/.kube
        touch ~/.kube/config
        echo $KUBE_CONFIG | base64 --decode > ~/.kube/config
        cat ~/.kube/config
        DEPLOYMENT=$(echo "Hello_CI_CD" | sed s/_/-/g | sed s/fast-//g)
        echo $DEPLOYMENT
        kubectl apply -f config/
        kubectl set image -n $NAMESPACE deployment/$DEPLOYMENT ${{ env.DEV_IMAGE }}
        rm -rf ~/.kube
